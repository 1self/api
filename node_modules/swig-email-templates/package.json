{
  "name": "swig-email-templates",
  "version": "1.3.0",
  "description": "Node.js module for rendering emails with swig templates and email-friendly inline CSS",
  "main": "index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andrewrk/swig-email-templates.git"
  },
  "author": {
    "name": "Andrew Kelley"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "~1.20.1",
    "pend": "~1.1.2"
  },
  "bin": {
    "swig-email-templates": "bin/swig-email-templates.js"
  },
  "dependencies": {
    "swig": "~1.4.1",
    "juice2": "~1.3.0",
    "jsdom": "~0.11.1",
    "optimist": "~0.6.1",
    "html-to-text": "~0.1.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/andrewrk/swig-email-templates.png?branch=master)](https://travis-ci.org/andrewrk/swig-email-templates)\n# swig-email-templates\n\nNode.js module for rendering emails with swig templates and\nemail-friendly inline CSS using [juice](https://github.com/LearnBoost/juice).\n\nInspired by [niftylettuce/node-email-templates](https://github.com/niftylettuce/node-email-templates).\n\n## Features\n\n * Uses [swig](https://github.com/paularmstrong/swig/), which supports\n   [Django-inspired template inheritance](https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance).\n * Uses [juice](https://github.com/LearnBoost/juice), which takes an HTML\n   file and inlines all the `<link rel=\"stylesheet\">`s and the `<style>`s.\n * URL rewrite support - you can provide a `urlRewriteFn` argument to rewrite\n   your links.\n * Text emails - for a template name passed into render(), if a file exists \n   with the same name but a .txt extension it will be rendered separately.\n   If the .txt file does not exist, html-to-text will auto-generate a text \n   version of the html file. This can be disabled with the option `text: false`.\n\n## Usage\n\n```js\nvar path = require('path')\n  , emailTemplates = require('swig-email-templates')\n\nvar options = {\n  root: path.join(__dirname, \"templates\"),\n  // any other swig options allowed here\n};\nemailTemplates(options, function(err, render) {\n  var context = {\n    meatballCount: 9001,\n  };\n  render('meatball-sandwich.html', context, function(err, html, text) {\n    // send html/text email\n  });\n});\n```\n\n## Command Line\n\nInstalling swig-email-templates through npm will put the `swig-email-templates` command in your system path, allowing it to be run from any directory.\n\n#### Usage\n\n```\nswig-email-templates render [files] [options]\n```\n\nWhere `[files]` can be any number of input files to process.\n\nThe options are:\n\n* **-v, --version**: Display the installed version of swig-email-templates\n* **-h, --help**: Show the help screen\n* **-o --output**: The directory to output your files to. Defaults to `stdout`\n* **-r, --root**: The root location for the files. The default is `templates`.\n\n* **-j, --json**: The file that contains your context, stored in JSON\n* **-c, --context**: The file that contains your context, stored as a CommonJS module. Used only if `-j` is not provided.\n\n### Example usage\n\nThe following examples renders two files, `email1.html` and `email2.html`, which are both contained in the cwd. It uses the context stored in `context/main.json` for rendering, and places the results in the folder `output`.\n\n```\nswig-email-templates render email1.html email2.html -r ./ -o output/ -j context/main.json\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrewrk/swig-email-templates/issues"
  },
  "homepage": "https://github.com/andrewrk/swig-email-templates",
  "_id": "swig-email-templates@1.3.0",
  "_from": "swig-email-templates@"
}
