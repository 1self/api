{
  "name": "juice2",
  "version": "1.3.0",
  "description": "Inlines css into html source",
  "bin": {
    "juice2": "./bin/juice"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">=0.10.20"
  },
  "dependencies": {
    "slick": "~1.12.1",
    "commander": "~2.3.0",
    "cssom": "~0.3.0",
    "superagent": "~0.18.2",
    "jsdom": "~0.11.1",
    "pend": "~1.1.2"
  },
  "devDependencies": {
    "should": "~4.0.4",
    "mocha": "~1.20.1",
    "expresso": "~0.9.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewrk/juice.git"
  },
  "readme": "[![Build Status](https://travis-ci.org/andrewrk/juice.png?branch=master)](https://travis-ci.org/andrewrk/juice)\n# Juice ![](http://i.imgur.com/jN8Ht.gif)\n\nGiven HTML, juice will inline your CSS properties into the `style`\nattribute.\n\n## How to use\n\n```js\nvar juice = require('juice2');\njuice(\"/path/to/file.html\", function(err, html) {\n  console.log(html);\n});\n```\n\n`/path/to/file.html`:\n```html\n<html>\n<head>\n  <style>\n    p { color: red; }\n  </style>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <p>Test</p>\n</body>\n</html>\n```\n\n`style.css`\n```css\np {\n  text-decoration: underline;\n}\n```\n\nOutput:\n```html\n<html>\n<head>\n</head>\n<body>\n  <p style=\"color: red; text-decoration: underline;\">Test</p>\n</body>\n</html>\n```\n\n## What is this useful for ?\n\n- HTML emails. For a comprehensive list of supported selectors see\n[here](http://www.campaignmonitor.com/css/)\n- Embedding HTML in 3rd-party websites.\n\n## Projects using juice\n\n* [node-email-templates][1] - Node.js module for rendering beautiful emails with [ejs][2] templates and email-friendly inline CSS using [juice][3].\n* [swig-email-templates][4] - Uses [swig][5], which gives you [template inheritance][6], and\n  can generate a [dummy context][7] from a template.\n\n[1]: https://github.com/niftylettuce/node-email-templates\n[2]: https://github.com/visionmedia/ejs\n[3]: https://github.com/LearnBoost/juice\n[4]: https://github.com/andrewrk/swig-email-templates\n[5]: https://github.com/paularmstrong/swig\n[6]: https://docs.djangoproject.com/en/dev/topics/templates/#template-inheritance\n[7]: https://github.com/andrewrk/swig-dummy-context\n\n## Documentation\n\n### juice(filePath, [options], callback)\n\n * `filePath` - html file\n * `options` - (optional) object containing these properties:\n   - `extraCss` - extra css to apply to the file. Defaults to `\"\"`.\n   - `applyStyleTags` - whether to inline styles in `<style></style>`\n     Defaults to `true`.\n   - `applyLinkTags` - whether to resolve `<link rel=\"stylesheet\">` tags\n     and inline the resulting styles. Defaults to `true`.\n   - `removeStyleTags` - whether to remove the original `<style></style>`\n     tags after (possibly) inlining the css from them. Defaults to `true`.\n   - `preserveMediaQueries` - preserves all media queries (and contained styles) \n     within `<style></style>` tags as a refinement when `removeStyleTags` is `true`. \n     Other styles are removed. Defaults to `false`.\n   - `applyWidthAttributes` - whether to use any CSS pixel widths to create\n     `width` attributes on elements set in `juice.widthElements`\n   - `removeLinkTags` - whether to remove the original `<link rel=\"stylesheet\">`\n     tags after (possibly) inlining the css from them. Defaults to `true`.\n   - `url` - how to resolve hrefs. Defaults to using `filePath`. If you want\n     to override, be sure your `url` has the protocol at the beginning, e.g.\n     `http://` or `file://`.\n * `callback(err, html)`\n   - `err` - `Error` object or `null`.\n   - `html` - contains the html from `filePath`, with potentially `<style>` and\n     `<link rel=\"stylesheet\">` tags removed, and css inlined.\n\n### juice.juiceContent(html, options, callback)\n\n * `html` - raw html content\n * `options` - same options as calling `juice`, except now `url` is required.\n * `callback(err, html)` - same as calling `juice`\n\n### juice.juiceDocument(document, options, callback)\n\nOperates on a jsdom instance. Be sure to use the same jsdom version that juice\nuses. Also be sure to clean up after you are done. You may have to\ncall `document.parentWindow.close()` to free up memory.\n\n * `document` - a jsdom instance\n * `options` - see `juice.juiceContent`\n * `callback(err)`\n\n### juice.inlineContent(html, css)\n\nThis takes html and css and returns new html with the provided css inlined.\nIt does not look at `<style>` or `<link rel=\"stylesheet\">` elements at all.\n\n### juice.inlineDocument(document, css, options)\n\nGiven a jsdom instance and css, this modifies the jsdom instance so that the\nprovided css is inlined. It does not look at `<style>` or\n`<link rel=\"stylesheet\">` elements at all.\n\n### juice.ignoredPseudos\n\nArray of ignored pseudo-selectors such as 'hover' and 'active'.\n\n### juice.widthElements\n\nArray of HTML elements that can receive `width` attributes.\n\n### 3rd-party\n\n- Uses the excellent [JSDom](http://github.com/tmpvar/jsdom) for the underlying DOM\nrepresentation.\n- Uses [cssom](https://github.com/NV/CSSOM) to parse out CSS selectors and\n[Slick](http://github.com/subtleGradient/slick) to tokenize them.\n- Icon by [UnheardSounds](http://unheardsounds.deviantart.com/gallery/26536908#/d2ngozi)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrewrk/juice/issues"
  },
  "homepage": "https://github.com/andrewrk/juice",
  "_id": "juice2@1.3.0",
  "_from": "juice2@~1.3.0"
}
